import {
  Header,
  Root,
  useReviewWorkflows
} from "./chunk-JZUMWTAV.js";
import {
  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,
  LimitsModal,
  useGetContentTypesQuery
} from "./chunk-VFZHQUHJ.js";
import {
  useTypedSelector
} from "./chunk-B6JQAZYQ.js";
import "./chunk-C7H2BX76.js";
import "./chunk-ZGKJK3SX.js";
import "./chunk-J5GK7ELJ.js";
import "./chunk-5R3JQH75.js";
import "./chunk-V2WCLN3X.js";
import "./chunk-NXJPNAVR.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-EQNVG6MX.js";
import {
  useLicenseLimits
} from "./chunk-BIPM55TR.js";
import "./chunk-DKSNVUZ6.js";
import "./chunk-I35PJYW4.js";
import "./chunk-FYDLDSI3.js";
import "./chunk-6RU576EE.js";
import "./chunk-3IAGZ6AG.js";
import "./chunk-NLR3DB66.js";
import "./chunk-6LZNTQLV.js";
import {
  ConfirmDialog
} from "./chunk-CZFDBZ3J.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-4BTSJKOL.js";
import "./chunk-K65KIEAL.js";
import "./chunk-GMSZIAWI.js";
import "./chunk-T3L443AE.js";
import "./chunk-2KXEZT7R.js";
import "./chunk-BGQCTZSS.js";
import "./chunk-ZOCPOTWW.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-KUCF5YVE.js";
import "./chunk-EGNP2T5O.js";
import {
  useTracking
} from "./chunk-SBW6TY6I.js";
import "./chunk-KCWD2OOK.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-QIJGNK42.js";
import "./chunk-GH4AODX3.js";
import "./chunk-MX53FCS7.js";
import "./chunk-MDDA7I4A.js";
import "./chunk-V74RV7DV.js";
import {
  Table
} from "./chunk-DGTR6CID.js";
import "./chunk-OZFLIURV.js";
import "./chunk-LA2IKARV.js";
import {
  useRBAC
} from "./chunk-WUJZWTLT.js";
import "./chunk-ZIF75DX2.js";
import "./chunk-XGWG3UNT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page
} from "./chunk-7WSRINYR.js";
import "./chunk-4V37HNTR.js";
import "./chunk-7UPKYWHJ.js";
import "./chunk-PP362SAZ.js";
import "./chunk-5XF4WOEN.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-YKP6UJQ6.js";
import "./chunk-CE4VABH2.js";
import "./chunk-5VODLFKF.js";
import "./chunk-M3V7D4GF.js";
import {
  Dialog,
  Flex,
  IconButton,
  LinkButton,
  TFooter,
  Typography,
  useIntl
} from "./chunk-NYO5TNK2.js";
import "./chunk-PRDQYKHH.js";
import {
  Link,
  NavLink,
  useNavigate
} from "./chunk-5RINRXFK.js";
import "./chunk-MW5AJ4MM.js";
import {
  ForwardRef$1h,
  ForwardRef$1v,
  ForwardRef$j
} from "./chunk-6JTLHWQD.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-7YYX4UUW.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/strapi/node_modules/@strapi/review-workflows/dist/admin/routes/settings/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var ReviewWorkflowsListView = () => {
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const [workflowToDelete, setWorkflowToDelete] = React.useState(null);
  const [showLimitModal, setShowLimitModal] = React.useState(false);
  const { data, isLoading: isLoadingModels } = useGetContentTypesQuery();
  const { meta, workflows, isLoading, delete: deleteAction } = useReviewWorkflows();
  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["review-workflows"];
  });
  const { allowedActions: { canCreate, canRead, canUpdate, canDelete } } = useRBAC(permissions);
  const limits = getFeature("review-workflows");
  const numberOfWorkflows = limits == null ? void 0 : limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];
  const handleDeleteWorkflow = (workflowId) => {
    setWorkflowToDelete(workflowId);
  };
  const toggleConfirmDeleteDialog = () => {
    setWorkflowToDelete(null);
  };
  const handleConfirmDeleteDialog = async () => {
    if (!workflowToDelete) return;
    await deleteAction(workflowToDelete);
    setWorkflowToDelete(null);
  };
  const handleCreateClick = (event) => {
    event.preventDefault();
    if (numberOfWorkflows && meta && (meta == null ? void 0 : meta.workflowCount) >= parseInt(numberOfWorkflows, 10)) {
      event.preventDefault();
      setShowLimitModal(true);
    } else {
      navigate("create");
      trackUsage("willCreateWorkflow");
    }
  };
  React.useEffect(() => {
    if (!isLoading && !isLicenseLoading) {
      if (numberOfWorkflows && meta && (meta == null ? void 0 : meta.workflowCount) > parseInt(numberOfWorkflows, 10)) {
        setShowLimitModal(true);
      }
    }
  }, [
    isLicenseLoading,
    isLoading,
    meta,
    meta == null ? void 0 : meta.workflowCount,
    numberOfWorkflows
  ]);
  const headers = [
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.name.title",
        defaultMessage: "Name"
      }),
      name: "name"
    },
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.stages.title",
        defaultMessage: "Stages"
      }),
      name: "stages"
    },
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.contentTypes.title",
        defaultMessage: "Content Types"
      }),
      name: "content-types"
    }
  ];
  if (isLoading || isLoadingModels) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const contentTypes = Object.values(data ?? {}).reduce((acc, curr) => {
    acc.push(...curr);
    return acc;
  }, []);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Header, {
        primaryAction: canCreate ? (0, import_jsx_runtime.jsx)(LinkButton, {
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1h, {}),
          size: "S",
          tag: NavLink,
          to: "create",
          onClick: handleCreateClick,
          children: formatMessage({
            id: "Settings.review-workflows.list.page.create",
            defaultMessage: "Create new workflow"
          })
        }) : null,
        subtitle: formatMessage({
          id: "Settings.review-workflows.list.page.subtitle",
          defaultMessage: "Manage your content review process"
        }),
        title: formatMessage({
          id: "Settings.review-workflows.list.page.title",
          defaultMessage: "Review Workflows"
        })
      }),
      (0, import_jsx_runtime.jsxs)(Root, {
        children: [
          (0, import_jsx_runtime.jsx)(Table.Root, {
            isLoading,
            rows: workflows,
            footer: canCreate ? (0, import_jsx_runtime.jsx)(TFooter, {
              cursor: "pointer",
              icon: (0, import_jsx_runtime.jsx)(ForwardRef$1h, {}),
              onClick: handleCreateClick,
              children: formatMessage({
                id: "Settings.review-workflows.list.page.create",
                defaultMessage: "Create new workflow"
              })
            }) : null,
            headers,
            children: (0, import_jsx_runtime.jsxs)(Table.Content, {
              children: [
                (0, import_jsx_runtime.jsx)(Table.Head, {
                  children: headers.map((head) => (0, import_jsx_runtime.jsx)(Table.HeaderCell, {
                    ...head
                  }, head.name))
                }),
                (0, import_jsx_runtime.jsx)(Table.Body, {
                  children: workflows.map((workflow) => (0, import_jsx_runtime.jsxs)(Table.Row, {
                    onClick: () => {
                      navigate(`${workflow.id}`);
                    },
                    children: [
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        width: "25rem",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          textColor: "neutral800",
                          fontWeight: "bold",
                          ellipsis: true,
                          children: workflow.name
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          textColor: "neutral800",
                          children: workflow.stages.length
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          textColor: "neutral800",
                          children: workflow.contentTypes.map((uid) => {
                            const contentType = contentTypes.find((contentType2) => contentType2.uid === uid);
                            return (contentType == null ? void 0 : contentType.info.displayName) ?? "";
                          }).join(", ")
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        children: (0, import_jsx_runtime.jsxs)(Flex, {
                          alignItems: "center",
                          justifyContent: "end",
                          children: [
                            canRead || canUpdate ? (0, import_jsx_runtime.jsx)(IconButton, {
                              tag: Link,
                              to: workflow.id.toString(),
                              label: formatMessage({
                                id: "Settings.review-workflows.list.page.list.column.actions.edit.label",
                                defaultMessage: "Edit {name}"
                              }, {
                                name: workflow.name
                              }),
                              variant: "ghost",
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$1v, {})
                            }) : null,
                            workflows.length > 1 && canDelete ? (0, import_jsx_runtime.jsx)(IconButton, {
                              withTooltip: false,
                              label: formatMessage({
                                id: "Settings.review-workflows.list.page.list.column.actions.delete.label",
                                defaultMessage: "Delete {name}"
                              }, {
                                name: "Default workflow"
                              }),
                              variant: "ghost",
                              onClick: (e) => {
                                e.stopPropagation();
                                handleDeleteWorkflow(String(workflow.id));
                              },
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$j, {})
                            }) : null
                          ]
                        })
                      })
                    ]
                  }, workflow.id))
                })
              ]
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Root, {
            open: !!workflowToDelete,
            onOpenChange: toggleConfirmDeleteDialog,
            children: (0, import_jsx_runtime.jsx)(ConfirmDialog, {
              onConfirm: handleConfirmDeleteDialog,
              children: formatMessage({
                id: "Settings.review-workflows.list.page.delete.confirm.body",
                defaultMessage: "If you remove this worfklow, all stage-related information will be removed for this content-type. Are you sure you want to remove it?"
              })
            })
          }),
          (0, import_jsx_runtime.jsxs)(LimitsModal.Root, {
            open: showLimitModal,
            onOpenChange: () => setShowLimitModal(false),
            children: [
              (0, import_jsx_runtime.jsx)(LimitsModal.Title, {
                children: formatMessage({
                  id: "Settings.review-workflows.list.page.workflows.limit.title",
                  defaultMessage: "You’ve reached the limit of workflows in your plan"
                })
              }),
              (0, import_jsx_runtime.jsx)(LimitsModal.Body, {
                children: formatMessage({
                  id: "Settings.review-workflows.list.page.workflows.limit.body",
                  defaultMessage: "Delete a workflow or contact Sales to enable more workflows."
                })
              })
            ]
          })
        ]
      })
    ]
  });
};
var ProtectedListPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a, _b;
    return (_b = (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["review-workflows"]) == null ? void 0 : _b.main;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(ReviewWorkflowsListView, {})
  });
};
export {
  ProtectedListPage,
  ReviewWorkflowsListView
};
//# sourceMappingURL=settings-7M4WOV5P.js.map
