import {
  pluginId
} from "./chunk-WJ7VFQWO.js";
import {
  useMutation,
  useQuery
} from "./chunk-NXJPNAVR.js";
import {
  useFetchClient
} from "./chunk-NLR3DB66.js";
import {
  useTracking
} from "./chunk-SBW6TY6I.js";
import {
  useNotification
} from "./chunk-M3V7D4GF.js";
import {
  useIntl
} from "./chunk-NYO5TNK2.js";

// node_modules/@strapi/strapi/node_modules/@strapi/upload/dist/admin/hooks/useConfig.mjs
var endpoint = `/${pluginId}/configuration`;
var queryKey = [
  pluginId,
  "configuration"
];
var useConfig = () => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { get, put } = useFetchClient();
  const config = useQuery(queryKey, async () => {
    const res = await get(endpoint);
    return res.data.data;
  }, {
    onError() {
      return toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error"
        })
      });
    },
    /**
    * We're cementing that we always expect an object to be returned.
    */
    select: (data) => data || {}
  });
  const putMutation = useMutation(async (body) => {
    await put(endpoint, body);
  }, {
    onSuccess() {
      trackUsage("didEditMediaLibraryConfig");
      config.refetch();
    },
    onError() {
      return toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error"
        })
      });
    }
  });
  return {
    config,
    mutateConfig: putMutation
  };
};

export {
  useConfig
};
//# sourceMappingURL=chunk-S7VNPVQC.js.map
